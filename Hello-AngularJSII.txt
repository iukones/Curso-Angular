¡Increíble! Ha creado una aplicación AngularJS. ¿Como funciona?

En app.js, creamos un nuevo módulo llamado myApp. Un módulo contiene los diferentes componentes de una aplicación AngularJS.
Luego, en index.html agregamos <body ng-app = "myApp">. El ng-app se llama una directiva. Le dice a AngularJS que el módulo myApp vivirá dentro del elemento <body>, denominado alcance de la aplicación. En otras palabras, utilizamos la directiva ng-app para definir el ámbito de la aplicación.
En MainController.js creamos un nuevo controlador denominado MainController. Un controlador gestiona los datos de la aplicación. Aquí usamos el título de propiedad para almacenar una cadena, y adjuntarla a $ scope.
Luego, en index.html, agregamos <div class = "main" ng-controller = "MainController">. Al igual que ng-app, ng-controller es una directiva que define el ámbito del controlador. Esto significa que las propiedades asociadas a $ scope en MainController están disponibles para su uso en <div class = "main">.
Dentro de <div class = "main"> accedimos a $ scope.title usando {{title}}. Esto se llama una expresión. Las expresiones se utilizan para mostrar valores en la página.
El valor del título apareció cuando vimos la aplicación en el navegador.

3.Workflow
Hasta ahora, este es nuestro flujo de trabajo típico al realizar una aplicación de AngularJS:
Cree un módulo y use ng-app en la vista para definir el ámbito de la aplicación.
Cree un controlador y utilice ng-controller en la vista para definir el ámbito del controlador.
Agregue datos al ámbito $ en el controlador para que puedan mostrarse con expresiones en la vista.

4.FiltersI
¡Bien hecho! En el controlador, utilizó un objeto para agrupar datos relacionados con un producto. A continuación, en la vista, utilizó la notación de puntos para mostrar los valores.

5.FiltersII

¡Estupendo! El precio del producto cambió de un número a una moneda con formato. ¿Como funciona?

AngularJS obtiene el valor de product.price.
Envía este número al filtro de moneda. El símbolo de tubo (|) toma la salida a la izquierda y la "canaliza" a la derecha.
El filtro emite una moneda formateada con el signo de dólar y los decimales correctos.
De esta manera, los filtros ayudan a separar el contenido del controlador de su presentación en la vista.

6.ng-repeat I
Hagamos una revisión rápida:
Un módulo contiene los diferentes componentes de una aplicación AngularJS
Un controlador gestiona los datos de la aplicación
Una expresión muestra valores en la página
Un filtro formatea el valor de una expresión

7.ng-repeat II
¡Bien hecho! Tienes dos libros en $ scope.products para aparecer en la vista. ¿Como funciona?
En el controlador, utilizamos productos para almacenar una matriz que contenía dos objetos.
Luego en la vista, agregamos <div ng-repeat = "producto en productos">. Como ng-app y ng-controller, la ng-repeat es una directiva. Loops a través de una matriz y muestra cada elemento. Aquí, ng-repeat repite todo el HTML dentro de <div class = "col-md-6"> para cada elemento de la matriz de productos.
De esta manera, ng-repeat muestra ambos productos en la matriz $ scope.products. En lugar de escribir el mismo código HTML dos veces antes, sólo usamos ng-repeat para generar el HTML dos veces.

8.Directives
Hemos utilizado algunas directivas hasta ahora: ng-app, ng-controller, ng-repeat y ng-src. ¿Qué podemos generalizar sobre las directivas?
Las directivas enlazan comportamiento a elementos HTML. Cuando se ejecuta la aplicación, AngularJS recorre cada elemento HTML buscando directivas. Cuando encuentra uno, AngularJS activa ese comportamiento (como adjuntar un ámbito o realizar un bucle a través de una matriz).

9.ng-click I
Hasta ahora hemos creado una aplicación AngularJS estática añadiendo propiedades en el controlador y mostrándolas en la vista. AngularJS es un marco para crear aplicaciones web dinámicas, así que comencemos a hacer que esta aplicación sea interactiva.

10.ng-click II
¡Estupendo! Cada vez que haga clic en el número de gustos, el número sube. ¿Como funciona?
El ng-click es una directiva. Cuando se hace clic en <p class = "likes">, ng-click le dice a AngularJS que ejecute la función plusOne () en el controlador.
La función plusOne () obtiene el índice del producto al que se hizo clic y, a continuación, agrega uno a la propiedad likes de ese producto.
Observe que el plusOne () no interactúa con la vista en absoluto; Sólo actualiza el controlador. Cualquier cambio realizado en el controlador aparece en la vista.

1.Directives I
Esta es una aplicación de AngularJS para una tienda de aplicaciones para móviles:

En el controlador MainController.js, hay tres objetos $ scope.move, $ scope.shutterbugg y $ scope.gameboard que contienen información sobre una aplicación, como su título y su precio.
En la vista index.html en la sección .main, cada aplicación se muestra dentro de una div. Card.
Pero mirando la vista, el mismo código se escribe una y otra vez para mostrar cada aplicación. Esto es repetitivo y propenso a errores. Vamos a arreglar esto.

2.Directives II
¿Qué acabamos de hacer? Escribimos código para enseñar al navegador un nuevo elemento HTML <app-info>, y lo utilizamos en la vista para mostrar los detalles de cada aplicación.

Primero en js / directives / appInfo.js, hicimos una nueva directiva. Utilizamos app.directive para crear una nueva directiva denominada 'appInfo'. Devuelve un objeto con tres opciones:

Restrict especifica cómo se utilizará la directiva en la vista. El 'E' significa que se utilizará como un nuevo elemento HTML.
Scope especifica que pasaremos información a esta directiva a través de un atributo llamado info. The = le dice a la directiva que busque un atributo llamado info en el elemento <app-info>, como esto:
 <App-info info = "shutterbugg"> </ app-info>
Los datos de info se vuelven disponibles para su uso en la plantilla dada por templateURL.
TemplateUrl especifica el HTML a utilizar para mostrar los datos en scope.info. Aquí utilizamos el HTML en js / directives / appInfo.html.
En cuanto a js / directives / appInfo.html, definimos el HTML para mostrar detalles sobre una aplicación, como su título y precio. Utilizamos expresiones y filtros para mostrar los datos.

Luego en index.html usamos la nueva directiva como el elemento HTML <app-info>. Pasamos objetos desde el ámbito del controlador ($ scope.shutterbugg) al atributo de información del elemento <app-info> para que se muestre.

3.Directives III
¿Por qué crear sus propias directivas útil?

Legibilidad. Directivas permiten escribir HTML expresiva. En cuanto a index.html se puede entender el comportamiento de la aplicación con sólo leer el código HTML.
Reutilización. Directivas permiten crear unidades autónomas de funcionalidad. Fácilmente podríamos enchufar en esta directiva a otra aplicación AngularJS y evitar la escritura de una gran cantidad de HTML repetitivo.


4.Build-in and custom directives
Sabemos que AngularJS viene con algunas directivas integradas como ng-repeat y ng-click.
Hemos visto que AngularJS hace posible crear sus propias directivas personalizadas, como <app-info>.
Podemos utilizar las directivas integradas de Angular junto con directivas personalizadas para crear aplicaciones más legibles.

Para referencia, he aquí cómo usar ng-repeat:
<Div ng-repeat = "product in products">
  <Img ng-src = "{{product.cover}}">
  <P class = "title"> {{product.name}} </ p>
</ Div>

5.installApp I
Las directivas son una característica esencial de AngularJS. Hasta ahora hemos utilizado directivas personalizadas para simplemente mostrar contenido estático, pero pueden hacer más que esto. Es posible transformar la interactividad en directivas.
Comencemos a crear otra directiva que reaccione al clic de un usuario.

6.installApp II
Utilizamos app.directive para crear una nueva directiva denominada 'installApp'.

La directiva contiene las tres opciones restrict, scope y templateUrl que vimos antes en la directiva 'appInfo'.
También contiene un enlace de la cuarta opción. El enlace se utiliza para crear directivas interactivas que responden a las acciones del usuario.

La función de enlace toma tres entradas:

-scope se refiere al ámbito de aplicación de la Directiva. Cualquier nueva propiedad asociada a $scope estará disponible para su uso en la plantilla de la directiva.

-element se refiere al elemento HTML de la directiva.

-attrs contiene los atributos del elemento.

Dentro de la función link, hay dos propiedades buttonText e installed, y la función download(). Los utilizaremos en la siguiente plantilla de la directiva.

7.installApp III
La plantilla utiliza la directiva ng-click incorporada de Angular. Cuando se hace clic en el botón, ng-click le indicará a AngularJS que ejecute la función download () en la directiva.

La función download () utiliza la propiedad scope.installed para verificar si una aplicación está instalada. Cuando se instala una aplicación, download () hace tres cosas:

Cambia la clase .btn-active
Cambia el texto del botón a "Desinstalar"
Cambia el scope.installed a true

8.Generalizations
¡Bien hecho! Ahora aparece un botón "Instalar" debajo de cada aplicación. Al hacer clic en el botón, cambia a un botón "Desinstalar". Cuando vuelves a hacer clic en él, cambia de nuevo a un botón "Instalar".
¿Qué podemos generalizar hasta ahora?
Las directivas son una forma poderosa de crear componentes independientes e interactivos. A diferencia de jQuery que añade interactividad como una capa encima de HTML, AngularJS trata la interactividad como un componente nativo de HTML.

1.Services I
Hasta ahora hemos hecho aplicaciones de AngularJS agregando datos a un controlador y luego mostrándolo en una vista.
Pero, ¿qué ocurre cuando los datos contienen cientos de artículos o si cambian constantemente como el clima o los datos financieros? Hardcoding datos en un controlador no funcionará más.
Una solución mejor es leer los datos vivos de un servidor. Podemos hacer esto creando un servicio.

2.Services II
¡Bien hecho! La city_name muestra ahora en la vista. ¿Como funciona?

Por primera vez en js/servicios/forecast.js, hicimos un nuevo servicio . Se utilizó app.factory para crear un nuevo servicio llamado forecast
El forecast servicio necesita utilizar AngularJS incorporado en $http a buscar JSON desde el servidor. Por lo tanto, añadimos $http al forecast servicio como una dependencia, como esto:
 ['$http', function($http) {
   // ...
 }]
Ahora $http está disponible para su uso en el interior forecast.
Luego, en el interior forecast, que utilizamos $http para construir un HTTP GET solicitud de los datos del tiempo. Si la solicitud se realiza correctamente, se devuelven los datos del tiempo; de lo contrario la información de error se devuelve.
A continuación en el controlador, hemos utilizado el forecastservicio para obtener los datos desde el servidor. En primer lugar hemos añadido forecasten MainControllercomo una dependencia de modo que esté disponible para su uso. A continuación, dentro del controlador se utilizó forecastpara traer los datos de forma asíncrona de tiempo en el servidor y almacenarlo en$scope.fiveDay
Como antes, las propiedades asociadas a $scopeconvertirse en disponibles para su uso en la vista. Esto significa, en index.html , podemos mostrar el city_name uso de una expresión como se ha hecho antes.

3.Generalizations
¿Por qué son útiles los servicios? En lugar de llenar el controlador con código para obtener los datos de tiempo en un servidor, es mejor mover esta lógica independiente en un servicio para que pueda ser reutilizado por otras partes de la aplicación.
¿Qué podemos generalizar hasta ahora?
Las directivas son una manera de hacer componentes de interfaz independientes, como <app-info>
Los servicios son una manera de hacer lógica de comunicación independiente, al igual que forecastla que obtiene datos de tiempo de un servidor.

1.Routing I
Hasta ahora hemos creado aplicaciones de AngularJS que muestran datos en una única vista index.html.
Pero, ¿qué sucede cuando la aplicación crece y necesita mostrar más información? Rellenar más código en una sola vista rápidamente hará que las cosas sean desordenadas.
Una solución mejor es utilizar varias plantillas que muestran diferentes partes de datos basadas en la URL que el usuario está visitando. Podemos hacerlo con la Angular's application routes..

2.Routing II

¡Estupendo! Aparece una galería de imágenes. ¿Como funciona?

En app.js dentro del método app.config (), usamos el $ routeProvider de Angular para definir las rutas de la aplicación.
Usamos .when () para mapear la URL / para el controlador HomeController y la plantilla home.html. El HomeController utiliza el servicio js / services / photos.js para obtener la matriz de todas las fotos de https://s3.amazonaws.com/codecademy-content/courses/ltp4/photos-api/photos.json y lo almacena en $ Scope.photos. El home.html utiliza ng-repeat para realizar un bucle a través de cada elemento de la matriz de fotos y mostrar cada foto.
De lo contrario, si un usuario visita accidentalmente una URL distinta de /, simplemente reorientamos a / using .otherwise (). Ahora, cuando un usuario visita /, se construirá una vista inyectando home.html en la <div ng-view> </ div> en index.html.

3.Routing III

¿Qué acabamos de hacer?

En app.js, hemos asignado una URL a PhotoController y photo.html. Añadimos una parte variable denominada id a la URL,
así: /photos/:id.
En PhotoController, usamos $routeParams de Angular para recuperar el identificador de la URL usando $routeParams.id. Observe que inyectamos $routeParams y el servicio de fotos en la matriz de dependencias de PhotoController para que estén disponibles para su uso dentro del controlador.
Luego, para buscar una foto individual, utilizamos por primera vez el servicio de fotos para obtener la matriz de fotos del servidor y luego usamos $routeParams.id para acceder a la foto específica por su índice.
Como antes, todas las propiedades asociadas a $scope están disponibles para su uso en la vista. Esto significa que en photo.html, podemos mostrar el detalle de la foto usando expresiones como antes.
Tenga en cuenta que al hacer clic en vínculos, la aplicación no realiza una recarga completa. Sólo cambia la parte de la vista especificada por <div ng-view></ div>.

3.Generalizaciones
¿Por qué son útiles las rutas? En lugar de rellenar una sola vista con más código de lo necesario, las rutas nos permiten asignar URL a controladores y plantillas autónomos. Además, ahora que la aplicación tiene URL, los usuarios pueden marcar y compartir fácilmente las páginas de la aplicación.

¿Qué podemos generalizar hasta ahora?
-Las directivas son una forma de crear componentes de interfaz de usuario independientes, como <app-info>.
-Los servicios son una forma de hacer una lógica de comunicación autónoma, como el pronóstico que obtiene datos meteorológicos de un servidor.
-Las rutas son una forma de administrar las aplicaciones que contienen más vistas.


